// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/api/rpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaderService_RegisterWorker_FullMethodName   = "/api.LeaderService/RegisterWorker"
	LeaderService_AssignTask_FullMethodName       = "/api.LeaderService/AssignTask"
	LeaderService_ReportTaskStatus_FullMethodName = "/api.LeaderService/ReportTaskStatus"
)

// LeaderServiceClient is the client API for LeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderServiceClient interface {
	RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	AssignTask(ctx context.Context, in *TaskAssignment, opts ...grpc.CallOption) (*TaskResponse, error)
	ReportTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*StatusResponse, error)
}

type leaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderServiceClient(cc grpc.ClientConnInterface) LeaderServiceClient {
	return &leaderServiceClient{cc}
}

func (c *leaderServiceClient) RegisterWorker(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, LeaderService_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderServiceClient) AssignTask(ctx context.Context, in *TaskAssignment, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, LeaderService_AssignTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderServiceClient) ReportTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LeaderService_ReportTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServiceServer is the server API for LeaderService service.
// All implementations must embed UnimplementedLeaderServiceServer
// for forward compatibility.
type LeaderServiceServer interface {
	RegisterWorker(context.Context, *WorkerInfo) (*RegisterResponse, error)
	AssignTask(context.Context, *TaskAssignment) (*TaskResponse, error)
	ReportTaskStatus(context.Context, *TaskStatus) (*StatusResponse, error)
	mustEmbedUnimplementedLeaderServiceServer()
}

// UnimplementedLeaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderServiceServer struct{}

func (UnimplementedLeaderServiceServer) RegisterWorker(context.Context, *WorkerInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedLeaderServiceServer) AssignTask(context.Context, *TaskAssignment) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedLeaderServiceServer) ReportTaskStatus(context.Context, *TaskStatus) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskStatus not implemented")
}
func (UnimplementedLeaderServiceServer) mustEmbedUnimplementedLeaderServiceServer() {}
func (UnimplementedLeaderServiceServer) testEmbeddedByValue()                       {}

// UnsafeLeaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderServiceServer will
// result in compilation errors.
type UnsafeLeaderServiceServer interface {
	mustEmbedUnimplementedLeaderServiceServer()
}

func RegisterLeaderServiceServer(s grpc.ServiceRegistrar, srv LeaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderService_ServiceDesc, srv)
}

func _LeaderService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServiceServer).RegisterWorker(ctx, req.(*WorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderService_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServiceServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderService_AssignTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServiceServer).AssignTask(ctx, req.(*TaskAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderService_ReportTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServiceServer).ReportTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderService_ReportTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServiceServer).ReportTaskStatus(ctx, req.(*TaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderService_ServiceDesc is the grpc.ServiceDesc for LeaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LeaderService",
	HandlerType: (*LeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorker",
			Handler:    _LeaderService_RegisterWorker_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _LeaderService_AssignTask_Handler,
		},
		{
			MethodName: "ReportTaskStatus",
			Handler:    _LeaderService_ReportTaskStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/rpc.proto",
}

const (
	WorkerService_ExecuteTask_FullMethodName = "/api.WorkerService/ExecuteTask"
	WorkerService_AckTask_FullMethodName     = "/api.WorkerService/AckTask"
)

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	ExecuteTask(ctx context.Context, in *TaskData, opts ...grpc.CallOption) (*ExecutionResponse, error)
	AckTask(ctx context.Context, in *AckInfo, opts ...grpc.CallOption) (*AckResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) ExecuteTask(ctx context.Context, in *TaskData, opts ...grpc.CallOption) (*ExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutionResponse)
	err := c.cc.Invoke(ctx, WorkerService_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) AckTask(ctx context.Context, in *AckInfo, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, WorkerService_AckTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility.
type WorkerServiceServer interface {
	ExecuteTask(context.Context, *TaskData) (*ExecutionResponse, error)
	AckTask(context.Context, *AckInfo) (*AckResponse, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerServiceServer struct{}

func (UnimplementedWorkerServiceServer) ExecuteTask(context.Context, *TaskData) (*ExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedWorkerServiceServer) AckTask(context.Context, *AckInfo) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckTask not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}
func (UnimplementedWorkerServiceServer) testEmbeddedByValue()                       {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ExecuteTask(ctx, req.(*TaskData))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_AckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_AckTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AckTask(ctx, req.(*AckInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _WorkerService_ExecuteTask_Handler,
		},
		{
			MethodName: "AckTask",
			Handler:    _WorkerService_AckTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/rpc.proto",
}
